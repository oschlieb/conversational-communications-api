/*
 * Audio Test
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var sinon = require('sinon');
var sinonChai = require('sinon-chai');

chai.should();
var expect = chai.expect;

chai.use(chaiAsPromised);
chai.use(sinonChai);

var ConversationClient = require('../../lib/sdk');

describe('RTC_Cache', function() {
	var sandbox;
	beforeEach(function() {
		sandbox = sinon.sandbox.create();
	});
	afterEach(function() {
		sandbox.restore();
	});
	describe('Object', function() {
		var conversationClient;
		beforeEach(function() {
			conversationClient = new ConversationClient()
		});
		afterEach(function() {
			conversationClient.cache.invalidate();
		});
		it('should create a worker instance', function() {
			return expect(conversationClient.cache.worker).to.exist;
		});
	});
	describe('Instance', function() {
		it('should be created if cache is set to true', function() {
			var conversationClient = new ConversationClient();
			return expect(conversationClient.cache).to.exist;
		});
		it('should not be created if cache is set to false', function() {
			var conversationClient = new ConversationClient({
				cache: false
			});
			return expect(conversationClient.cache).to.not.exist;
		});
	});
	describe('Functions', function() {});
});