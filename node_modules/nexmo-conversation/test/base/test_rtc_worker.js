/*
 * Audio Test
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var sinon = require('sinon');
var sinonChai = require('sinon-chai');

chai.should();
var expect = chai.expect;

chai.use(chaiAsPromised);
chai.use(sinonChai);

var Cache_worker = require('../../lib/modules/cache-worker.js');

describe('Web worker', function() {
	var sandbox;
	var worker;
	before(function() {
		var cache_worker = new Cache_worker();
		worker = new Worker(URL.createObjectURL(cache_worker.cache_worker_blob));
		worker.onmessage = function(event) {
			console.log(event.data);
		}
	});
	beforeEach(function() {
		sandbox = sinon.sandbox.create();
	});
	afterEach(function() {
		sandbox.restore();
	});
	// this item instanciates as a web worker, 
	// we don't expect code coverage to cover it
	describe('Object', function() {
		it('should create a worker instance', function() {
			return expect(worker).to.exist;
		});
	});
	describe('Functions', function() {
		describe('onmessage', function() {
			it('should send a message to the worker', function() {
				return worker.postMessage('must have data');
			});
			it.skip('should process invalidate event', function(done) {
				worker.onmessage = function(event) {
					expect(event.data.worker_action).to.equal('conversations:invalidate:success');
					done();
				}
				worker.postMessage({
					worker_action: "conversations:invalidate"
				});
			})
		});
	});
});