/*
 * Conversation Client Image Event Test
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var sinon = require('sinon');
var sinonChai = require('sinon-chai');

var assert = chai.assert;
var expect = chai.expect;

chai.use(chaiAsPromised);
chai.use(sinonChai);
var Conversation = require('../../lib/conversation').Conversation;
var ImageEvent = require('../../lib/events/image_event').ImageEvent;

describe('ImageEvent', function() {
	describe('Function', function() {
		describe('del()', function() {
			var imageEvent;
			var application;
			var spy_sendRequest;
			var event_id = 1;
			beforeEach(function() {
				application = {
					me: {
						id: 'my user id'
					},
					session: {
						log: {
							debug: function() {}
						},
						sendRequest: function(params, callback) {
							callback({
								type: 'event:delete:success'
							});
						}
					}
				};
				var conversation = new Conversation(application);
				conversation.id = 'cid';
				conversation.me = {
					id: 'some_id'
				}
				spy_sendRequest = sinon.spy(conversation.application.session, 'sendRequest');
				imageEvent = new ImageEvent(conversation, {
					id: event_id
				})
			});

			it('should resolve the promise', function() {

				var promise_del = imageEvent.del();
				return expect(promise_del).to.be.fulfilled;
			});

			it('should delete this event', function() {
				imageEvent.del();
				return expect(spy_sendRequest).to.have.been.calledWith({
					type: 'event:delete',
					cid: imageEvent.conversation.id,
					from: imageEvent.conversation.me.id,
					body: {
						"event_id": event_id
					}
				});
			});

			it('should reject with API error', function() {
				var response = {
					type: 'error:event:delete'
				}; //override the stubbed sendRequest for error
				application.session.sendRequest = function(params, callback) {
					callback({
						type: response.type
					});
				}
				var conversation = new Conversation(application);
				conversation.me = {
					id: 'some_id'
				}
				imageEvent = new ImageEvent(conversation, null)
				var promise_del = imageEvent.del();
				return expect(promise_del).to.be.rejectedWith(response.type).then(function(error) {
					return Promise.all([
						expect(error).to.include.all.keys('stack', 'message', 'name'),
						expect(error.message).to.equal('type: ' + response.type + ', description: ')
					]);
				});
			});
		});

		describe('seen()', function() {
			var imageEvent;
			var application;
			var spy_sendRequest;
			var event_id = 1;
			beforeEach(function() {
				application = {
					me: {
						id: 'my user id'
					},
					session: {
						log: {
							debug: function() {}
						},
						sendRequest: function(params, callback) {
							callback({
								type: 'image:seen:success'
							});
						}
					}
				};
				var conversation = new Conversation(application);
				conversation.id = 'cid';
				conversation.me = {
					id: 'some_id'
				}
				spy_sendRequest = sinon.spy(conversation.application.session, 'sendRequest');
				imageEvent = new ImageEvent(conversation, {
					id: event_id
				})
			});

			it('should resolve the promise', function() {

				var promise_seen = imageEvent.seen();
				return expect(promise_seen).to.be.fulfilled;
			});

			it('should send seen for this event', function() {
				imageEvent.seen();
				return expect(spy_sendRequest).to.have.been.calledWith({
					type: 'image:seen',
					cid: imageEvent.conversation.id,
					from: imageEvent.conversation.me.id,
					body: {
						"event_id": event_id
					}
				});
			});

			it('should reject to send seen for own event', function() {
				imageEvent.from = imageEvent.conversation.me.id;
				var promise_seen = imageEvent.seen();
				return expect(promise_seen).to.have.been.rejected
					.then(function(error) {
						return Promise.all([
							expect(error).to.include.all.keys('stack', 'message', 'name'),
							expect(error.message).to.equal('type: error:seen:own-message, description: attempt to send seen for own message')
						]);
					});
			});

			it('should reject to send seen for already seen event', function() {
				imageEvent.state = {
					seen_by: {}
				}
				imageEvent.state.seen_by[imageEvent.conversation.me.id] = {};
				var promise_seen = imageEvent.seen();
				return expect(promise_seen).to.have.been.rejected
					.then(function(error) {
						return Promise.all([
							expect(error).to.include.all.keys('stack', 'message', 'name'),
							expect(error.message).to.equal('type: error:already-seen, description: already marked as seen')
						]);
					});
			});

			it('should resolve if event.state exists empty', function() {
				imageEvent.state = {}
				var promise_seen = imageEvent.seen();
				return expect(promise_seen).to.have.been.fulfilled
			});

			it('should reject with API error', function() {
				var response = {
					type: 'error:image:seen'
				}; //override the stubbed sendRequest for error
				application.session.sendRequest = function(params, callback) {
					callback({
						type: response.type
					});
				}
				var conversation = new Conversation(application);
				conversation.me = {
					id: 'some_id'
				}
				imageEvent = new ImageEvent(conversation, null)
				var promise_seen = imageEvent.seen();
				return expect(promise_seen).to.be.rejectedWith(response.type)
					.then(function(error) {
						return Promise.all([
							expect(error).to.include.all.keys('stack', 'message', 'name'),
							expect(error.message).to.equal('type: ' + response.type + ', description: ')
						]);
					});
			});

		});

		describe('delivered()', function() {
			var imageEvent;
			var application;
			var spy_sendRequest;
			var event_id = 1;
			beforeEach(function() {
				application = {
					me: {
						id: 'my user id'
					},
					session: {
						log: {
							debug: function() {}
						},
						sendRequest: function(params, callback) {
							callback({
								type: 'image:delivered:success'
							});
						}
					}
				};
				var conversation = new Conversation(application);
				conversation.id = 'cid';
				conversation.me = {
					id: 'some_id'
				}
				spy_sendRequest = sinon.spy(conversation.application.session, 'sendRequest');
				imageEvent = new ImageEvent(conversation, {
					id: event_id
				})
			});

			it('should resolve the promise', function() {

				var promise_delivered = imageEvent.delivered();
				return expect(promise_delivered).to.be.fulfilled;
			});

			it('should send delivered for this event', function() {
				imageEvent.delivered();
				return expect(spy_sendRequest).to.have.been.calledWith({
					type: 'image:delivered',
					cid: imageEvent.conversation.id,
					from: imageEvent.conversation.me.id,
					body: {
						"event_id": event_id
					}
				});
			});

			it('should reject to send delivered for own event', function() {
				imageEvent.from = imageEvent.conversation.me.id;
				var promise_delivered = imageEvent.delivered();
				return expect(promise_delivered).to.have.been.rejected
					.then(function(error) {
						return Promise.all([
							expect(error).to.include.all.keys('stack', 'message', 'name'),
							expect(error.message).to.equal('type: error:delivered:own-message, description: attempt to send delivered for own message')
						]);
					});
			});

			it('should reject to send delivered for already delivered event', function() {
				imageEvent.state = {
					delivered_to: {}
				}
				imageEvent.state.delivered_to[imageEvent.conversation.me.id] = {};
				var promise_delivered = imageEvent.delivered();
				return expect(promise_delivered).to.have.been.rejected
					.then(function(error) {
						return Promise.all([
							expect(error).to.include.all.keys('stack', 'message', 'name'),
							expect(error.message).to.equal('type: error:already-delivered, description: already marked as delivered')
						]);
					});
			});

			it('should resolve if event.state exists empty', function() {
				imageEvent.state = {}
				var promise_delivered = imageEvent.delivered();
				return expect(promise_delivered).to.have.been.fulfilled
			});

			it('should reject with API error', function() {
				var response = {
					type: 'error:image:delivered'
				}; //override the stubbed sendRequest for error
				application.session.sendRequest = function(params, callback) {
					callback({
						type: response.type
					});
				}
				var conversation = new Conversation(application);
				conversation.me = {
					id: 'some_id'
				}
				imageEvent = new ImageEvent(conversation, null)
				var promise_delivered = imageEvent.delivered();
				return expect(promise_delivered).to.be.rejectedWith(response.type).then(function(error) {
					return Promise.all([
						expect(error).to.include.all.keys('stack', 'message', 'name'),
						expect(error.message).to.equal('type: ' + response.type + ', description: ')
					]);
				});
			});
		});

	});
	describe('Object', function() {
		it('should be created by calling new', function() {
			var imageEvent = new ImageEvent();
			return expect(imageEvent).to.be.an.instanceof(ImageEvent);
		});
	});
});