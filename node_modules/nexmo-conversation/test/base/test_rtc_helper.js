/*
 * TRC helper Tests
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var RtcHelper = require('../../lib/modules/rtc_helper').RtcHelper;
var sinon = require('sinon');
var chai = require('chai');


var browserDetect = require('detect-browser');

var expect = chai.expect;


describe('RTC_helper', function () {
    var rtcHelper = new RtcHelper();
    var sandbox;
    var getUserMediaStub;
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
        getUserMediaStub = sandbox.stub(navigator.mediaDevices, 'getUserMedia');
    });

    describe('when asking for user audio', function () {
        beforeEach(function () {
            rtcHelper.getUserAudio();
        });

        afterEach(function () {
            sandbox.restore();
        });

        it('should call getUserMedia with audio true video false', function () {
            return expect(getUserMediaStub).to.be.calledWith({
                audio: true,
                video: false
            });
        })
    });

    describe('when asking for user video', function () {
        beforeEach(function () {
            rtcHelper.getUserVideo();
        });

        afterEach(function () {
            sandbox.restore();
        });

        it('should call getUserMedia with audio true video true', function () {
            return expect(getUserMediaStub).to.be.calledWith({
                audio: true,
                video: true
            });
        })
    })

    describe('when asking for screen sharing', function () {
        var getScreenSharePromise;
        describe('when the browser is not https', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('http');
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should fail on error', function () {
                return getScreenSharePromise.then(function () {
                    fail();
                }).catch(function (e) {
                    return expect(e.message).to.be.equal('type: error:media:unsupported-browser, description: This action is not supported on this browser');
                })
            })
        })

        describe('when the chrome extension is not installed', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');

                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('chrome');
                var documentGetElementByIdMock = sandbox.stub(document, 'getElementById');
                documentGetElementByIdMock.withArgs('janus-extension-installed').returns(null);
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should fail on error', function () {
                return getScreenSharePromise.then(function () {
                    fail();
                }).catch(function (e) {
                    return expect(e.message).to.be.equal('type: error:media:unsupported-browser, description: This action is not supported on this browser');
                })
            })
        })

        describe('when the browser is not chrome', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');
                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('firefox');
                getScreenSharePromise = rtcHelper.getUserScreen();
            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should fail on error', function () {
                return getScreenSharePromise.then(function () {
                    fail();
                }).catch(function (e) {
                    return expect(e.message).to.be.equal('type: error:media:unsupported-browser, description: This action is not supported on this browser');
                })
            })
        })

        describe('when the browser is chrome and the extension installed', function () {
            var windowEventListenerStub;
            var windowPostMessageStub;
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');

                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('chrome');
                var documentGetElementByIdMock = sandbox.stub(document, 'getElementById');
                documentGetElementByIdMock.withArgs('janus-extension-installed').returns({});

                windowEventListenerStub = sandbox.stub(window, 'addEventListener');
                windowPostMessageStub = sandbox.stub(window, 'postMessage');
                var event = {
                    origin: window.location.origin,
                    data: {
                        type: 'janusGotScreen',
                        sourceId: 'sourceId'
                    }
                };
                windowEventListenerStub.withArgs('message', sinon.match.any).yields(event);
                getUserMediaStub.resolves('stream');
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should call addEventListener', function () {
                return getScreenSharePromise.then(function () {
                    return expect(windowEventListenerStub).to.be.calledOnce;
                })
            })

            it('should call postMessage', function () {
                return getScreenSharePromise.then(function () {
                    return Promise.all([
                        expect(windowPostMessageStub).to.be.calledOnce,
                        expect(windowPostMessageStub).to.be.calledWith({type: 'janusGetScreen'}, '*')
                    ]);
                })
            })
            it('should call getUserMedia', function () {
                var constraints = {
                    audio: false,
                    video: {
                        mandatory: {
                            chromeMediaSource: 'desktop',
                            maxWidth: window.screen.width,
                            maxHeight: window.screen.height,
                            maxFrameRate: 15,
                            chromeMediaSourceId: 'sourceId'
                        },
                        optional: []
                    }
                };
                return getScreenSharePromise.then(function () {
                    return Promise.all([
                        expect(getUserMediaStub).to.be.calledOnce,
                        expect(getUserMediaStub).to.be.calledWith(constraints)
                    ])
                })
            })
        })

        describe('when getting invalid response from getUserMedia', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');

                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('chrome');
                var documentGetElementByIdMock = sandbox.stub(document, 'getElementById');
                documentGetElementByIdMock.withArgs('janus-extension-installed').returns({});

                var windowEventListenerStub = sandbox.stub(window, 'addEventListener');
                sandbox.stub(window, 'postMessage');
                var event = {
                    origin: window.location.origin,
                    data: {
                        type: 'janusGotScreen',
                        sourceId: 'sourceId'
                    }
                };
                windowEventListenerStub.withArgs('message', sinon.match.any).yields(event);
                getUserMediaStub.rejects('error');
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should reject with error', function () {
                return getScreenSharePromise
                    .then(function () {
                        fail();
                    }).catch(function (e) {
                        return expect(e.message).to.be.equal('Janus Extension shareScreenWebRTCService.getStream error: error');
                    })
            })

        });

        describe('when the event origin is not as the browser origin', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');

                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('chrome');
                var documentGetElementByIdMock = sandbox.stub(document, 'getElementById');
                documentGetElementByIdMock.withArgs('janus-extension-installed').returns({});

                var windowEventListenerStub = windowEventListenerStub = sandbox.stub(window, 'addEventListener');
                sandbox.stub(window, 'postMessage');
                var event = {
                    origin: 'mockEventOrigin',
                    data: {
                        type: 'janusGotScreen',
                        sourceId: 'sourceId'
                    }
                };
                windowEventListenerStub.withArgs('message', sinon.match.any).yields(event);
                getUserMediaStub.resolves('stream');
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should reject with error', function () {
                return getScreenSharePromise
                    .then(function () {
                        fail();
                    }).catch(function (e) {
                        return expect(e.message).to.be.equal('Janus Extension - different domain');
                    })
            })

        })

        describe('when the event origin is not as the browser origin', function () {
            beforeEach(function () {
                var windowProtocolMock = sandbox.stub(RtcHelper.prototype, '_getWindowLocationProtocol');
                windowProtocolMock.returns('https:');

                var browserMock = sandbox.stub(RtcHelper.prototype, '_getBrowserName');
                browserMock.returns('chrome');
                var documentGetElementByIdMock = sandbox.stub(document, 'getElementById');
                documentGetElementByIdMock.withArgs('janus-extension-installed').returns({});

                var windowEventListenerStub = windowEventListenerStub = sandbox.stub(window, 'addEventListener');
                sandbox.stub(window, 'postMessage');
                var event = {
                    origin: window.location.origin,
                    data: {
                        type: 'janusGotScreen',
                        sourceId: ''
                    }
                };
                windowEventListenerStub.withArgs('message', sinon.match.any).yields(event);
                getUserMediaStub.resolves('stream');
                getScreenSharePromise = rtcHelper.getUserScreen();

            });

            afterEach(function () {
                sandbox.restore();
            });

            it('should reject with error', function () {
                return getScreenSharePromise
                    .then(function () {
                        fail();
                    }).catch(function (e) {
                        return expect(e.message).to.be.equal('janusGotScreen - invalid source id');
                    })
            })

        })
    })
});
