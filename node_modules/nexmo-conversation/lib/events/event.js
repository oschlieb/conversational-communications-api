/*
 * Conversation SDK
 *  Event object model
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var WildEmitter = require('wildemitter');
var ConversationClientError = require('../conversationClientError');

var NexmoApiError = ConversationClientError.NexmoApiError;
var NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * Conversation Event object.
 * @class Event
 */
var Event = function(conversation, params) {
    this.conversation = conversation;

    //TODO: to move this to a constructor
    this._normalise = function(params) {
        //TODO: use 'deconstructing' object;
        if (params) {
            for (var key in params) {
                switch (key) {
                    case "type":
                        this.type = params.type;
                        break;
                    case "cid":
                        this.cid = params.cid;
                        break;
                    case "from":
                        this.from = params.from;
                        break;
                    case "timestamp":
                        this.timestamp = params.timestamp;
                        break;
                    case "id":
                        this.id = params.id;
                        break;
                    case "body":
                        this.body = params.body;
                        if (this.body.user && this.body.user.user_id) {
                            this.body.user.id = this.body.user.user_id;
                            delete this.body.user.user_id;
                        }
                        break;
                }
            }
        }
    }
    WildEmitter.call(this);
    this._normalise(params);
};

Event.prototype = new WildEmitter();
//reset the original Type
Event.prototype.constructor = Event;

/**
 * Delete the event
 * @param {Number} [event_id=this.event_id] if the event id param is not present, "this" event will be default
 * @returns {Promise}
 */
Event.prototype.deleteEvent = function(event_id) {
    var self = this;
    var p = new Promise(function(resolve, reject) {
        self.conversation.application.session.sendRequest({
            type: 'event:delete',
            cid: self.conversation.id,
            from: self.conversation.me.id,
            body: {
                event_id: event_id || self.id
            }
        }, function(response) {
            if (response.type === 'event:delete:success') {
                resolve();
            } else {
                reject(new NexmoApiError(response));
            }
        });
    });
    return p;
};

/**
 * Mark as Delivered the event
 * @param {Number} [event_id=this.event_id] if the event id is not provided, the self event will be used
 * @returns {Promise}
 */
Event.prototype.deliveredEvent = function(event_id) {
    if (this.type !== "text" && this.type !== "image") {
        this.type = "event";
    }
    var self = this;
    var p = new Promise(function(resolve, reject) {
        if (self.conversation.me.id === self.from) {
            reject(new NexmoClientError("error:delivered:own-message"));
        } else if (self.state && self.state.delivered_to && self.state.delivered_to[self.conversation.me.id]) {
            reject(new NexmoClientError("error:already-delivered"));
        } else {
            var params = {
                event_id: event_id || self.id
            };
            self.conversation.application.session.sendRequest({
                type: self.type + ':delivered',
                from: self.conversation.me.id,
                cid: self.conversation.id,
                body: params
            }, function(response) {
                if (response.type === self.type + ':delivered:success') {
                    resolve();
                } else {
                    reject(new NexmoApiError(response));
                }
            });
            resolve();
        }
    });
    return p;
};

/**
 * Mark as Seen the event
 * @param {Number} [event_id=this.event_id] if the event id is not provided, the self event will be used
 * @returns {Promise}
 */
Event.prototype.seenEvent = function(event_id) {
    if (this.type !== "text" && this.type !== "image") {
        this.type = "event";
    }
    var self = this;
    var p = new Promise(function(resolve, reject) {
        if (self.conversation.me.id === self.from) {
            reject(new NexmoClientError("error:seen:own-message"));
        } else if (self.state && self.state.seen_by && self.state.seen_by[self.conversation.me.id]) {
            reject(new NexmoClientError("error:already-seen"));
        } else {
            var params = {
                event_id: event_id || self.id
            };
            self.conversation.application.session.sendRequest({
                type: self.type + ':seen',
                from: self.conversation.me.id,
                cid: self.conversation.id,
                body: params
            }, function(response) {
                if (response.type === self.type + ':seen:success') {
                    resolve();
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        }
    });
    return p;
}

module.exports = {
    Event: Event
};