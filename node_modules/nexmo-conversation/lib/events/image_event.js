/*
 * Conversation SDK
 *  Image Event object model
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var Event = require('./event').Event;

// Conversation Client Error
var ConversationClientError = require('../conversationClientError');

var NexmoApiError = ConversationClientError.NexmoApiError;
var NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * An image message
 * 
 * @class ImageEvent
 */

var ImageEvent = function(conversation, params) {
    this.conversation = conversation;
    this.state = {
        seen_by: {},
        delivered_to: {}
    };
    if (params && params.body) {
        if (params.body.timestamp)
            this.timestamp = params.body.timestamp;
    }
    // Map the params
    for (var key in params) {
        this[key] = params[key];
    }
};

ImageEvent.prototype = new Event(this.conversation, this);


/**
 * Set the message status to 'seen'
 */
ImageEvent.prototype.seen = function() {
    this.type = "image";
    return this.seenEvent();
};


/**
 * Set the message status to 'delivered'
 */
ImageEvent.prototype.delivered = function() {
    this.type = "image";
    return this.deliveredEvent();
};

/**
 * Delete the image event
 * @returns {Promise}
 */
ImageEvent.prototype.del = function() {
    // //          delete the image from media service
    // //          ?cmd=remove
    // //          &id=....
    // var representations = self.body.representations;
    // var imageDataObject = (representations instanceof Object) ? representations : JSON.parse(representations);
    // var url = imageDataObject[type].url + "?cmd=remove&id=" + imageDataObject.id;
    // var xhr = new XMLHttpRequest();
    // var token = JSON.parse(localStorage.getItem("NXMO_user_data")).token;
    // xhr.open("GET", url);
    // xhr.setRequestHeader("Authorization", "Bearer " + token);
    // xhr.responseType = 'arraybuffer';
    // xhr.onload = function() { //Call a function when the state changes.
    //     if (xhr.readyState === 4 && xhr.status === 200) {
    return this.deleteEvent();
};
/**
 * Download an Image from Media service //3 representations
 * @param {String} [type="thumbnail"] original, medium, thumbnail, 
 * @param {String} [representations=this.body.representations]  the ImageEvent.body for the image to download
 * @returns {String} "data:image/jpeg;base64..."
 * @example <caption>Downloading an image from the imageEvent</caption>
 * imageEvent.fetchImage().then(function(imagedata) {
 *                      imageEvent.body.thumbnail = imagedata;
 *                      //console.log('<img src="'+imagedata+'"/>');
 *                      
 *                      //to cancel the request:
 *                      current_user.conversation.abortSendImage(imageRequest); 
 *                       });
 */
ImageEvent.prototype.fetchImage = function(type, representations) {
    type = type || "thumbnail";
    representations = representations || this.body.representations;
    var p = new Promise(function(resolve, reject) {
        if (!localStorage.getItem("NXMO_user_data")) {
            reject(new NexmoClientError("user:error:relogin"));
        } else {
            var imageDataObject = (representations instanceof Object) ? representations : JSON.parse(representations);
            var url = imageDataObject[type].url;
            var xhr = new XMLHttpRequest();
            var token = JSON.parse(localStorage.getItem("NXMO_user_data")).token;
            xhr.open("GET", url);
            xhr.setRequestHeader("Authorization", "Bearer " + token);
            xhr.responseType = 'arraybuffer';
            xhr.onload = function() { //Call a function when the state changes.
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var responseArray = new Uint8Array(this.response);
                    // Convert the int array to a binary string
                    // We have to use apply() as we are converting an *array*
                    // and String.fromCharCode() takes one or more single values, not
                    // an array.
                    //support large image files (Chunking)
                    var res = "";
                    var chunk = 8 * 1024;
                    var i;
                    for (i = 0; i < responseArray.length / chunk; i++) {
                        res += String.fromCharCode.apply(null, responseArray.subarray(i * chunk, (i + 1) * chunk));
                    }
                    res += String.fromCharCode.apply(null, responseArray.subarray(i * chunk));
                    var b64 = btoa(res);
                    var dataUrl = "data:image/jpeg;base64," + b64;
                    resolve(dataUrl);
                } else {
                    // Previous state reject(xhr.status); -- Untested
                    reject(new NexmoClientError("error:fetch-image"));
                }
            };
            xhr.send();
        }
    });

    return p;
};

module.exports = {
    ImageEvent: ImageEvent
};