/*
 * Conversation SDK
 *  Conversation object model
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var WildEmitter = require('wildemitter'),
	Member = require('./member').Member,
	Event = require('./events/event').Event,
	TextEvent = require('./events/text_event').TextEvent,
	ImageEvent = require('./events/image_event').ImageEvent;

// var Audio = require('./modules/audio').Audio;
var Media = require('./modules/media').Media;

// Conversation Client Error
var ConversationClientError = require('./conversationClientError');

var NexmoApiError = ConversationClientError.NexmoApiError;
var NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * A single conversation Object.
 * @class Conversation 
 */
var Conversation = function(application, params) {
	this.application = application;
	this.id = null;
	this.name = null;
	this.display_name = null;
	this.timestamp = null;
	this.members = {};
	this.events = {};
	this.sequence_number = 0;
	// this.audio = new Audio(this);
	this.media = new Media(this);
	/**
	 * A Member object representing the current user.
	 * Only set if the user is or has been a member of the Conversation,
	 * otherwise the value will be `null`.
	 * @type Member
	 */
	this.me = null; // We are not in the conversation ourselves by default 
	// Map the params (which includes the id)
	this.updateObjectInstance(application, params);

	// call WildEmitter constructor
	WildEmitter.call(this);
};

Conversation.prototype = new WildEmitter();
//reset the original Type
Conversation.prototype.constructor = Conversation;

Conversation.prototype.updateObjectInstance = function(application, params) {
	var self = this;
	for (var key in params) {
		switch (key) {
			case 'id':
				this.id = params.id;
				break;
			case 'name':
				this.name = params.name;
				break;
			case 'display_name':
				this.display_name = params.display_name;
				break;
			case 'members':
				//update the conversation javascript object

				//CASE1 conversations:get:success, 
				//PATCH this responds with member[0].user_id and name

				// Iterate the list
				params.members.map(function(m) {
					var member = null;
					member = new Member(self, m);
					if (m.user_id === self.application.me.id) {
						self.me = member;
					}
					self.members[member.id] = member;
				});
				break;
			case 'timestamp':
				this.timestamp = params.timestamp;
				break;
			case 'sequence_number':
				this.sequence_number = params.sequence_number;
				break;
			case 'member_id':
				// filter needed params to create the object
				// the conversation list gives us the member_id to prepare themember/self object
				var object_params = {
					id: params.member_id,
					state: params.state,
					user: self.application.me
				};
				var member = new Member(self, object_params);
				self.me = member;
				self.members[member.id] = member;
				break;
		}
	}
};

/**
 * Join the given user to this conversation, will typically use this to join
 * ourselves to a conversation we create.
 * Accept an invitation if our member has state INVITED and no user_id / user_name is given
 * 
 * @param {Object} [params = self.application.me.id] The user to join (defaults to self)
 * @param {String} params.user_name the user_name of the user to join
 * @param {String} params.user_id the user_id of the user to join
 * @return {Promise<Member>}
 * 
 * @example <caption>join a user to a conversation</caption>
 * 
 * 		conversation.join()
 * 			.then(function(member) {
 * 				console.log("joined as member: ", member)
 * 		})
 */
Conversation.prototype.join = function(params) {
	var self = this;
	var request_body = {};
	if (!params && self.me && self.me.id && self.me.state === 'INVITED')
		request_body.member_id = self.me.id;

	// default to self if there is no username or id
	if (params && params.user_id)
		request_body.user_id = params.user_id;
	if (params && params.user_name)
		request_body.user_name = params.user_name;

	if (!params) {
		request_body.user_name = self.application.me.name;
		request_body.user_id = self.application.me.id;
	}

	var p = new Promise(function(resolve, reject) {
		self.application.session.sendRequest({
			type: 'conversation:join',
			cid: self.id,
			body: request_body
		}, function(response) {
			if (response.type === 'conversation:join:success') {
				// Create a new member object, response.body will contain all the parameters from the service
				var is_self = (response.body.user_id === self.application.me.id);
				var member = new Member(self, response.body);
				if (is_self) {
					self.me = member;
				}
				self.members[member.id] = member;
				self.application.getConversation(self.id).then(function(conversation) {
					resolve(conversation.members[member.id]);
				});
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
};

/**
 * Delete a conversation
 * 
 * @return {Promise}
 * 
 * @example <caption>delete the conversation</caption>
 * 
 * 		conversation.del()
 * 			.then(function() {
 * 				console.log("conversation deleted");
 * 		})
 */
Conversation.prototype.del = function() {
	var self = this;
	var p = new Promise(function(resolve, reject) {
		self.application.session.sendRequest({
			type: 'conversation:delete',
			cid: self.id
		}, function(response) {
			if (response.type === 'conversation:delete:success') {
				delete self.application.conversations[self.id];
				resolve();
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
};

/**
 * Delete an Event (e.g. Text)
 * @param {Event} event
 * @returns {Promise}
 * 
 */
Conversation.prototype.deleteEvent = function(event) {
	return event.deleteEvent(event.id);
};

/**
 * Invite the given user (id or name) to this conversation
 * @param {Member} params
 * @param {String} [params.id or username] - the id or the username of the user to invite
 * 
 * @returns {Promise<Member>}
 * 
 * @example <caption>invite a user to a conversation</caption>
 *  var user_id = 'user to invite';
 *  var user_name = 'username to invite';
 *
 *  conversation.invite({
 *          id: user_id,
 *          user_name: user_name
 *      })
 * 		.then(function(member) {
 *            displayMessage(member.state + " user: " + user_id + " " + user_name);
 *       }).catch(function(error) {
 *          console.log(error);
 *  });
 * 
 */
Conversation.prototype.invite = function(params) {
	if (!params || (!params.id && !params.user_name)) return Promise.reject(new NexmoClientError('error:invite:missing:params'));
	var self = this;
	var p = new Promise(function(resolve, reject) {
		self.application.session.sendRequest({
			type: 'conversation:invite',
			cid: self.id,
			body: {
				user_id: params.id,
				user_name: params.user_name,
				media: params.media
			}
		}, function(response) {
			if (response.type === 'conversation:invite:success') {
				// Create a new member object, response.body will contain all the parameters from the service
				var member = new Member(self, response.body);
				self.members[member.id] = member;
				resolve(member);
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
};

/**
 * Leave from the conversation
 * <pre>
 * 
 * --> conversation:member:delete
 *      payload = {
 *           type: 'conversation:member:delete',
 *           cid: &lt;conversation_id&gt;,
 *           from: &lt;member_id&gt;
 *           to: &lt;member_id&gt;,
 *           body: {
 *               "member_id": &lt;member_id&gt; //this is my member id
 *           }
 *      }
 * 
 * <-- [ack] conversation:member:delete:success
 * 
 * <-- conversation:member:delete
 * 
 * </pre>
 * 
 * @returns {Promise}
 */
Conversation.prototype.leave = function() {
	var self = this;
	var p = new Promise(function(resolve, reject) {
		self.application.session.sendRequest({
			type: 'conversation:member:delete',
			cid: self.id,
			from: self.me.id,
			body: {
				'member_id': self.me.id
			}
		}, function(response) {
			if (response.type === 'conversation:member:delete:success') {
				resolve(response.body);
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
};

/**
 * Send a text message to the conversation, which will be relayed to every other member of the conversation
 * @param {String} - text the text message to be sent
 * 
 * @returns {Promise<TextEvent>} - the text message that was sent 
 * 
 * @example <caption> sending a text </caption>
 *	conversation.sendText("Hi Nexmo").then(function(){
 *			console.log('message was sent');
 *		}).catch(function(error){
 *			console.log('error sending the message', error);
 *	});
 * 
 */
Conversation.prototype.sendText = function(text) {
	var self = this;
	var p = new Promise(function(resolve, reject) {
		if (self.me === null) {
			reject(new NexmoClientError('error:self'));
		} else {
			var msg = {
				type: 'text',
				cid: self.id,
				from: self.me.id,
				body: {
					text: text
				}
			};
			self.application.session.sendRequest(msg, function(response) {
				if (response.type === 'text:success') {
					msg.id = response.body.id;
					msg.body.timestamp = response.body.timestamp;
					var text_event = new TextEvent(self, msg);
					resolve(text_event);
				} else {
					reject(new NexmoApiError(response));
				}
			});
		}
	});

	return p;

};

/**
 * Send an Image message to the conversation, which will be relayed to every other member of the conversation.
 * implements xhr (https://xhr.spec.whatwg.org/) - this.imageRequest
 * 
 * @param {File} file single input file (jpeg/jpg)
 * @param {String} [params.quality_ratio = 100] a value between 0 and 100. 0 indicates 'maximum compression' and the lowest quality, 100 will result in the highest quality image
 * @param {String} [params.medium_size_ratio = 50] a value between 1 and 100. 1 indicates the new image is 1% of original, 100 - same size as origina
 * @param {String} [params.thumbnail_size_ratio = 10] a value between 1 and 100. 1 indicates the new image is 1% of original, 100 - same size as original
 * 
 * @returns {Promise<XMLHttpRequest>}
 * 
 * @example <caption>sending an image</caption>
 * conversation.sendImage(fileInput.files[0]).then(function(imageRequest){ 
 *    
 *         imageRequest.onabort = function(e) {
 *            console.log(e);
 *          console.log("Image:" + e.type);
 *      };
 *          imageRequest.onloadend = function(e) {
 *          console.log("Image:" + e.type);
 *      };
 * });
 */

Conversation.prototype.sendImage = function(fileInput, params) {
	params = params || {
		quality_ratio: 100,
		medium_size_ratio: 50,
		thumbnail_size_ratio: 30
	};
	var self = this;
	var p = new Promise(function(resolve, reject) {
		if (!localStorage.getItem("NXMO_user_data")) {
			reject(new NexmoClientError("user:error:relogin"));
		} else {
			if (self.me === null) {
				reject(new NexmoClientError("error:self"));
			} else {
				var imageRequest = new XMLHttpRequest();
				var token = JSON.parse(localStorage.getItem("NXMO_user_data")).token;
				var IPS_url = self.application.session.config.ips_url;
				var formData = new FormData();
				formData.append("file", fileInput);
				formData.append("quality_ratio", params.quality_ratio);
				formData.append("medium_size_ratio", params.medium_size_ratio);
				formData.append("thumbnail_size_ratio", params.thumbnail_size_ratio);
				imageRequest.open("POST", IPS_url);
				imageRequest.setRequestHeader("Authorization", "Bearer " + token);
				imageRequest.onloadstart = function() {
					resolve(this);
				};
				imageRequest.upload.addEventListener("progress", function(evt) {
					if (evt.lengthComputable) {
						// console.log("uploading image " + evt.loaded + "/" + evt.total);
					}
				}, false);
				imageRequest.onreadystatechange = function() {
					if (imageRequest.readyState === 4 && imageRequest.status === 200) {
						var msg = {
							type: 'image',
							cid: self.id,
							from: self.me.id,
							body: {
								representations: JSON.parse(imageRequest.responseText)
							}
						};
						self.application.session.sendRequest(msg, function(response) {
							if (response.type !== 'image:success') {
								reject(new NexmoApiError(response));
							}
						});
					} else {
						reject(new NexmoApiError(imageRequest));
					}
				};
				imageRequest.send(formData);
			}
		}
	});
	return p;
};

/**
 * Cancel sending an Image message to the conversation.
 * 
 * @param {XMLHttpRequest} imageRequest 
 * 
 * @returns void
 * 
 * @example <caption>cancel sending an image</caption>
 * conversation.sendImage(fileInput.files[0]).then(function(imageRequest){ 
 *    conversation.abortSendImage(imageRequest);
 * });
 */
Conversation.prototype.abortSendImage = function(imageRequest) {
	if (imageRequest) {
		imageRequest.abort();
	}
};

/**
 * Send start typing indication
 *
 * @returns {Promise} - resolves the promise on successful sent
 */
Conversation.prototype.startTyping = function() {
	var self = this;
	return typing.call(self, 'on');
};

/**
 * Send stop typing indication
 *
 * @returns {Promise} - resolves the promise on successful sent
 */
Conversation.prototype.stopTyping = function() {
	var self = this;
	return typing.call(self, 'off');
};

var typing = function(state) {
	var self = this;
	var p = new Promise(function(resolve, reject) {
		var params = {
			activity: (state === 'on') ? 1 : 0
		};
		self.application.session.sendRequest({
			type: 'text:typing:' + state,
			cid: self.id,
			from: self.me.id,
			body: params
		}, function(response) {
			if (response.type === 'text:typing:' + state + ':success') {
				resolve(response.type);
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
}
/**
 * Query the service to get a list of events in this conversation.
 *
 * @param {Object} [params] - leave empty to get all the events
 * @param {String} params.start_id - the id of the event to begin the batch 
 * @param {String} params.end_id - the id of the event to finish the batch
 * 
 * @returns {Promise<Array<Event>>} - A promise to the Events list 
 */
Conversation.prototype.getEvents = function(params) {
	var self = this;
	var p = new Promise(function(resolve, reject) {
		self.application.session.sendRequest({
			type: 'conversation:events',
			cid: self.id,
			body: params
		}, function(response) {

			if (response.type === 'conversation:events:success') {
				//events from cache are constructed with the proper object.
				//those from storage need to be processed (string conversion)

				if (!response.fromCache) {
					// Iterate and create the events
					response.body.map(function(m) {
						var message;
						switch (m.type) {
							case 'text':
								message = new TextEvent(self, m);
								self.events[message.id] = message;
								break;
							case 'image':
								message = new ImageEvent(self, m);
								self.events[message.id] = message;
								break;
							case 'member:joined':
							case 'member:left':
							case 'member:invited':
							case 'member:media':
							case 'audio:dtmf':
							case 'audio:record':
							case 'audio:record:done':
								message = new Event(self, m);
								self.events[message.id] = message;
								break;
						}
					});
				}
				resolve(self.events);
			} else {
				reject(new NexmoApiError(response));
			}
		});
	});
	return p;
};


/*
 * Handle and event from the cloud.
 * @param {event} event
 */
Conversation.prototype._handleEvent = function(event) {
	var self = this;
	var message;
	var delivered_id;
	var seen_id;

	//TODO Check local/remote sequence number matching
	// rtc:* events are not part of the history, and are session specific. forward them skipping the flow
	if (event.type.split(":")[0] === "rtc") {
		self.emit(event.type, event);
		return;
	}
	self.sequence_number++;

	// default from to the id of the incoming event until we get more info for this member
	// or replace the id with the member object
	if (!self.members[event.from]) {
		self.members[event.from] = new Member(self, event);
	}

	var from = self.members[event.from];

	switch (event.type) {
		case 'audio:dtmf':
		case 'audio:record':
		case 'audio:record:done':
			message = new Event(self, event);
			self.events[message.id] = message;
			self.emit(event.type, from, message);
			break;
		case 'image':
			message = new ImageEvent(self, event);
			self.events[message.id] = message;
			self.emit(event.type, from, message);
			// Automatically send a delivery
			// avoid sending delivered to our own messages
			if (self.me.id !== message.from) {
				message.delivered().catch(function(error) {
					self.application.session.log.debug(error);
				});
			}
			break;
		case 'text':
			message = new TextEvent(self, event);
			self.events[message.id] = message;
			self.emit(event.type, from, message);
			// Automatically send a delivery
			// avoid sending delivered to our own messages
			if (self.me.id !== message.from) {
				message.delivered().catch(function(error) {
					self.application.session.log.debug(error);
				});
			}
			break;
		case 'image:seen':
			message = new ImageEvent(self, event);
		case 'text:seen':
			message = (message) ? message : new TextEvent(self, event);
			seen_id = event.body.event_id;
			if (seen_id in self.events) {
				self.events[seen_id].state = self.events[seen_id].state || {};
				self.events[seen_id].state.seen_by = self.events[seen_id].state.seen_by || {};
				self.events[seen_id].state.seen_by[event.from] = event.timestamp;
				message = self.events[seen_id];
				self.emit(event.type, from, message);

			}
			break;
		case 'image:delivered':
			message = new ImageEvent(self, event);
		case 'text:delivered':
			message = (message) ? message : new TextEvent(self, event);
			delivered_id = event.body.event_id;
			if (delivered_id in self.events) {
				self.events[delivered_id].state = self.events[delivered_id].state || {};
				self.events[delivered_id].state.delivered_to = self.events[delivered_id].state.delivered_to || {}
				self.events[delivered_id].state.delivered_to[event.from] = event.timestamp;
				message = self.events[delivered_id];
				self.emit(event.type, from, message);
			}
			break;
		case 'event:delete':
			//handle both text events or image
			if (self.events[event.body.event_id].body.text) self.events[event.body.event_id].body.text = "";
			if (self.events[event.body.event_id].body.representations) self.events[event.body.event_id].body.representations = "";

			self.events[event.body.event_id].body.timestamp = {
				deleted: event.timestamp
			};
			message = self.events[event.body.event_id];
			self.emit(event.type, from, message);
			break;
		case 'member:joined':
		case 'member:invited':
		case 'member:left':
			//use the member object to handle the state
			from._handleEvent(event);
			// self.emit(event.type, from, event.body);
			message = new Event(self, event);
			self.events[event.id] = message;
			self.emit(event.type, from, message);
			if (self.application.session.cache && self.application.session.cache.conversation_data[self.id]) {
				self.application.session.cache.setConversationDirty(self.id, true); //temp fix for fixing member status on reload			
			}
			break;
		case 'member:media':
			//TODO refactor the other events to follow this pattern
			// event contructing the assigned class here, then get handled within the object that it belongs to
			// then routed back here if needed to emit in conversation
			message = new Event(self, event);
			self.members[event.from]._handleEvent(event);
			self.events[message.id] = message;
			//this should emit the message event
			self.emit(event.type, from, message);
			break;
		default:
			//mark the conversation as dirty since other than the text/image events occured so we need to invalidate the cache for now
			//no need to mark as dirty for typing indicators or seen events
			//TODO move this in cache module
			if (self.application.session.cache && self.application.session.cache.conversation_data[self.id] && [
					"text:typing:on",
					"text:typing:off"
				].indexOf(event.type) === -1) {
				self.application.session.cache.setConversationDirty(self.id, true);
			}
			if (event.cid === self.id) {
				// this should emit the event object
				self.emit(event.type, from, new Event(self, event));
			}
			break;
	}
	//now update cached item, if the conversation is marked as dirty, don't bother as it will be refreshed anyway
	//TODO move this login in the cahce module
	if (self.application.session.cache && !self.application.session.cache.getConversationDirtyStatus(self.id) && message) {
		self.application.session.cache.addConversationEvent(self.id, message, self.sequence_number, event);
	}
};

module.exports = {
	Conversation: Conversation
};