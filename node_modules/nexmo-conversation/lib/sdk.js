/*
 * Conversation SDK
 *  Main wrapper
 *
 * Copyright (c) Nexmo Inc. 2017
 */

var WildEmitter = require('wildemitter');
var socket_io = require('socket.io-client');
var logger = require('loglevel');
var prefix = require('loglevel-plugin-prefix');

var utils = require('./utils');

var RTC_Cache = require('./modules/rtc_cache');
var Application = require('./application').Application,
	User = require('./user').User;

prefix.apply(logger, {
	template: '[%t] %l (NXM-%n):',
	timestampFormatter: function(date) {
		return date.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
	},
	levelFormatter: function(level) {
		return level.toUpperCase();
	},
	nameFormatter: function(name) {
		return name || 'SDK';
	}
});

// Conversation Client Error
var ConversationClientError = require('./conversationClientError');

var NexmoApiError = ConversationClientError.NexmoApiError;
var NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * The parent ConversationClient class.
 *
 * @class ConversationClient
 * @param {Object} [params]
 * @param {Boolean} params.debug=false set mode to debug
 * @param {String} params.url=nexmo_ws_url Nexmo Conversation Websocket url 
 * @param {String} params.path=/rtc Nexmo Conversation Websocket url path suffix
 * @param {Boolean} params.reconnection=true socket.io reconnection attribute
 * @param {Boolean} params.forceNew=true socket.io forceNew attribute
 * @param {Boolean} params.autoConnect=true socket.io autoConnect attribute
 * @param {String} params.ips_url=ips_url Nexmo IPS url for image upload
 * @param {String} params.environment='production' development / production environment
 * @param {Object} params.iceServers={'stun:stun.l.google.com:19302'} iceServers for RTCPeerConnection
 *
 * @fires ConversationClient#ready
 */
function ConversationClient(params) {
	//save an array of instances
	var self = this;
	var options = params || {};
	var config = this.config = {
		autoConnect: true,
		bugsnag_key: 'cd2dcd56892c3cd260b12caf6eecf022',
		cache: true,
		debug: false,
		enable_log_reporter: true,
		environment: '@@environment',
		forceNew: true,
		ips_url: '@@ips_url',
		path: '/rtc',
		reconnection: true,
		repository: '@@repository',
		SDK_version: '@@SDK_version',
		url: '@@ws_url',
		iceServers: {
			urls: 'stun:stun.l.google.com:19302'
		}
	};
	var item,
		connection;
	this.sessionReady = false;
	this.requests = {};
	this.application = null;

	// set our config from options
	for (item in options) {
		this.config[item] = options[item];
	}

	if (config.debug === true) {
		logger.setLevel("debug");
	} else {
		logger.setLevel("silent");
	}
	this.log = logger.noConflict();

	//inject bug reporting tool
	if (config.enable_log_reporter) {
		function j(u, c) {
			var h = document.getElementsByTagName('head')[0],
				s = document.createElement('script');
			s.async = true;
			s.src = u;
			s.onload = s.onreadystatechange = function() {
				if (!s.readyState || /loaded|complete/.test(s.readyState)) {
					s.onload = s.onreadystatechange = null;
					s = undefined;
					if (c) {
						c();
					}
				}
			};
			h.insertBefore(s, h.firstChild);
		}


		if (typeof document !== "undefined") {
			j("//d2wy8f7a9ursnm.cloudfront.net/bugsnag-3.min.js", function() {
				if (typeof Bugsnag !== "undefined") {
					if (!Bugsnag.apiKey) {
						Bugsnag.apiKey = self.config.bugsnag_key;
						Bugsnag.releaseStage = self.config.environment;
						Bugsnag.appVersion = self.config.SDK_version;
						Bugsnag.repository = self.config.repository;
						Bugsnag.disableAutoBreadcrumbs();
					}
				}
			});
		}
	}
	// call WildEmitter constructor
	WildEmitter.call(this);

	// Create the socket.io connection and allow multiple instances
	connection = socket_io.connect(config.url, {
		path: config.path,
		forceNew: config.forceNew,
		reconnection: config.reconnection,
		autoConnect: config.autoConnect
	});

	this.connection = connection;

	if (config.cache) {
		this.cache = new RTC_Cache(this);
		this.cache.init(this);
	}

	/**
	 * Ready event.
	 *
	 * @event ConversationClient#ready
	 * @example <caption>Listen to websocket ready event </caption>
	 *     rtc.on("ready", function() {
	 *      console.log("connection ready");
	 *     });
	 */
	connection.on('connect', function() {
		self.emit('ready');
		self.sessionReady = true;
	});

	// Listen to socket.io events
	/**
	 * Connecting event.
	 *
	 * @event ConversationClient#connecting
	 * @example <caption>Listen to websocket connecting event </caption>
	 *     rtc.on("connecting", function() {
	 *      console.log("connecting");
	 *     });
	 */
	connection.on('connecting', function() {
		self.emit('connecting');
	});
	/**
	 * Disconnect event.
	 *
	 * @event ConversationClient#disconnect
	 * @example <caption>Listen to websocket disconnect event </caption>
	 *     rtc.on("disconnect", function() {
	 *      console.log("disconnect");
	 *     });
	 */
	connection.on('disconnect', function() {
		self.emit('disconnect');
	});
	/**
	 * Reconnect event.
	 *
	 * @event ConversationClient#reconnect
	 * @example <caption>Listen to websocket reconnect event </caption>
	 *     rtc.on("reconnect", function(retry_number) {
	 *      console.log("reconnect", retry_number);
	 *     });
	 */
	connection.on('reconnect', function(retry_number) {
		self.emit('reconnect', retry_number);
		if (self.cache && self.cache.user_data) {
			self.login(self.cache.user_data.token);
		}
	});
	/**
	 * Reconnecting event.
	 *
	 * @event ConversationClient#reconnecting
	 * @example <caption>Listen to websocket reconnecting event </caption>
	 *     rtc.on("reconnecting", function(retry_number) {
	 *      console.log("reconnecting", retry_number);
	 *     });
	 */
	connection.on('reconnecting', function(retry_number) {
		self.emit('reconnecting', retry_number);
	});
	/**x
	 * Error event.
	 *
	 * @event ConversationClient#error
	 * @example <caption>Listen to websocket error event </caption>
	 *     rtc.on("error", function(error) {
	 *      console.log("error", error);
	 *     });
	 */
	connection.on('error', function(error) {
		self.emit('error', new NexmoClientError(error))
		self.log.error("Socket.io reported a generic error", error);
	});

	connection.io.on('packet', function(packet) {
		if (packet.type !== 2) return;
		if (packet.data[0] === 'echo') return; //ignore echo events
		var response = packet.data[1];
		// Set the type of the response		
		response.type = packet.data[0];
		self.log.debug("<--", response.type, JSON.stringify(response));
		if (response.rid in self.requests) {
			var callback = self.requests[response.rid].callback;
			delete self.requests[response.rid];
			delete response.delay;
			callback(response);
		} else {
			// This is an unsolicited event
			//we are skipping here global application events.
			if (self.application)
				self.application._handleEvent(response);
		}
	});
}

ConversationClient.prototype = new WildEmitter();

/**
 * Conversation listening for text events.
 *
 * @event Conversation#text
 *
 * @property {Member} sender - The sender of the text
 * @property {Text} text - The text message received
 * @example <caption>listen for text events</caption>
 * conversation.on("text",
 *   function(sender, message) {
 *      console.log(sender,message);
 *
 * // Identify your own message.
 *      if (message.from !== conversation.me.id)
 *
 * // Identify if the event corresponds to the currently open conversation.
 *      if (message.cid === conversation.id)
 * });
 */
/**
 *
 *  Conversation listening for image events.
 *
 * @event Conversation#image
 *
 * @property {Member} sender - The sender of the image
 * @property {ImageEvent} image - The image message received
 * @example <caption>listen for image events</caption>
 * conversation.on("image",
 *   function(sender, image) {
 *      console.log(sender,image);
 *
 * // Identify your own imageEvent.
 *      if (image.from !== conversation.me.id)
 *
 *  // Identify if the event corresponds to the currently open conversation.
 *      if (image.cid === conversation.id)
 * });
 */
/**
 * Conversation listening for deleted events.
 *
 * @event Conversation#event:delete
 *
 * @property {Member} member - the member who deleted an event
 * @property {Event} event - deleted event: event.id
 * @example <caption>get details about the deleted event</caption>
 * conversation.on("event:delete",
 *   function(member, event) {
 *      console.log(event.id);
 *      console.log(event.body.timestamp.deleted);
 * });
 */
/**
 * Conversation listening for new members.
 *
 * @event Conversation#member:joined
 *
 * @property {Member} member - the member that joined
 * @property {Event} event - the join event
 * @example <caption>get the name of the new member</caption>
 * conversation.on("member:joined",
 *   function(member, event) {
 * 		console.log(event.id)
 *      console.log(member.user.name+ " joined the conversation");
 * });
 */
/**
 * Conversation listening for members being invited.
 *
 * @event Conversation#member:invited
 *
 * @property {Member} member - the member that is invited
 * @property {Event} event - data regarding the receiver of the invitation
 * @example <caption>get the name of the invited member</caption>
 * conversation.on("member:invited",
 *   function(member, event ) {
 *      console.log(member.user.name + " invited to the conversation");
 * });
 */
/**
 * Conversation listening for members leaving (kicked or left).
 *
 * @event Conversation#member:left
 *
 * @property {Member} member - the member that has left
 * @property {Event} event - data regarding the receiver of the invitation
 * @example <caption>get the username of the member that left</caption>
 * conversation.on("member:left",
 *   function(member , event ) {
 *      console.log(member.user.name + " left");
 * });
 */
/**
 * Conversation listening for members typing.
 *
 * @event Conversation#text:typing:on
 *
 * @property {Member} member - the member that started typing
 * @property {Event} event - the start typing event
 * @example <caption>get the username of the member that is typing</caption>
 * conversation.on("text:typing:on",
 *   function(data) {
 *      console.log(data.name + " is typing...");
 * });
 */
/**
 * Conversation listening for members stoped typing.
 *
 * @event Conversation#text:typing:off
 * 
 * @property {Member} member - the member that stopped typing
 * @property {Event} event - the stop typing event
 * @example <caption>get the username of the member that stopped typing</caption>
 * conversation.on("text:typing:off",
 *   function(data) {
 *      console.log(data.name + " stopped typing...");
 * });
 */
/**
 * Conversation listening for members' seen texts.
 *
 * @event Conversation#text:seen
 *
 * @property {Member} member - the member that saw the text
 * @property {Text} text - the text that was seen
 * @example <caption>listen for seen text events</caption>
 * conversation.on("text:seen",
 *   function(data, text) {
 *      console.log(text);
 *
 * // Check if the event belongs to this conversation
 *      if (text.cid === conversation.id)
 *
 * // Get the list of members that have seen this event
 *      for (var member_id in text.state.seen_by) {
 *          if (conversation.me.id !== member_id) {
 *              console.log(conversation.members[member_id].name);
 *          }
 *       }
 * });
 */
/**
 * Conversation listening for members' seen images.
 * @event Conversation#image:seen
 *
 * @property {Member} member - the member that saw the image
 * @property {ImageEvent} image - the image that was seen
 * @example <caption>listen for seen image events</caption>
 * conversation.on("image:seen",
 *   function(data, image) {
 *      console.log(image);
 *
 * // Check if the event belongs to this conversation
 *      if (image.cid === conversation.id)
 * // Get the list of members that have seen this event
 *      for (var member_id in image.state.seen_by) {
 *           if (conversation.me.id !== member_id) {
 *               console.log(conversation.members[member_id].name);
 *            }
 *       }
 * });
 */
/**
 * Conversation listening for members media changes (audio, video,text)
 *
 * Change in media presence state. They are in the conversation with text, audio or video.
 * 
 * @event Conversation#member:media
 *
 * @property {Member} member - the member object linked to this event 
 * @property {Event} event - information about media presence state
 * @property {boolean} event.body.audio  - is audio enabled
 * @example <caption>get every member's media change events </caption>
 * conversation.on("member:media",
 *   function(from, media ) {
 *      console.log(from.media.audio); //true
 * 		console.log(event.body.media); //{"audio":true}
 * });
 */
ConversationClient.prototype.sendRequest = function(request, callback) {
	// Add a message ID to the request and set up a listener for the reply (or error)
	var self = this;
	request.tid = utils.allocateUUID();
	var type = request.type;
	delete request.type;
	self.log.debug("-->", type, JSON.stringify(request));
	self.connection.emit(type, request);
	self.requests[request.tid] = {
		type: type,
		request: request,
		callback: callback
	};
};

/**
 * Login to the cloud.
 *x
 * @param {String} params.token - the login token
 */
ConversationClient.prototype.login = function(token) {
	var self = this;

	// return a promise for the application
	var p = new Promise(function(resolve, reject) {
		//make sure the token gets removed from localstorage until we work the retry mechanism
		if (typeof(Storage) !== "undefined") {
			localStorage.removeItem("NXMO_user_data");
		}
		self.sendRequest({
				type: 'session:login',
				body: {
					token: token,
					SDK_version: self.config.SDK_version,
					//device_id: //can use https://github.com/Valve/fingerprintjs2,
					OS_family: 'js',
					OS_revision: (typeof navigator !== "undefined") ? navigator.userAgent : (typeof window !== "undefined") ? window.navigator.userAgent : "Generic JS navigator"
				}
			},
			function(response) {
				if (response.type === "session:success") {
					var application = new Application(self);
					var me = new User(application, {
						id: response.body.user_id,
						name: response.body.name
					});
					self.application = application;
					self.application.me = me;
					if (self.cache) self.cache.updateToken({
						token: token,
						username: response.body.name
					});
					// Retrieve the existing conversation data for this user
					application.getConversations()
						.then(function() {
							// Complete the login process
							resolve(self.application);
							if (typeof Bugsnag !== "undefined") {

								Bugsnag.user = {
									id: application.me.id
								};
							}
						}, function(reason) {
							reject(new NexmoApiError(reason));
						});
				} else {
					reject(new NexmoApiError(response));
					//todo move this in cache module
					if (self.cache && self.cache.worker) {
						self.cache.worker.terminate();
					}
				}
			}
		);
	});
	return p;
};

/**
 * logout from the cloud.
 *
 */

ConversationClient.prototype.logout = function() {
	var self = this;
	// return a promise for the application
	var p = new Promise(function(resolve, reject) {

		var logoutRequest = function() {
			return self.sendRequest({
				type: 'session:logout',
				body: {}
			}, function(response) {
				if (response.type === "session:logged-out" || response.type === "session:terminated") {
					//TODO make sure this is successful and add to the chain
					//TODO move this in cache module
					self.disconnect();
					if (self.cache) self.cache.invalidate();

					if (self.application) {
						for (var conversation_id in self.application.conversations) {
							//unregister all events
							self.application.conversations[conversation_id].releaseGroup(conversation_id);
						}
					}
					delete self.application;
					delete self.cache;
					self.callbacks = {};
					//self.connection is safe to stay
					//self.log is safe to stay
					self.requests = {};
					self.sessionReady = false;
					resolve(response);
				} else {
					// Previous state reject(response.reason); -- Untested
					reject(new NexmoApiError(response));
					if (typeof Bugsnag !== "undefined") Bugsnag.notifyException(Error(response.reason));
				}
			});
		}

		// prepare for logout
		if (self.application && self.application.activeStream && self.application.activeStream.stream) {
			self.application.activeStream.conversation.media.disable()
				// mimicking .finally
				.then(function() {}).catch(function() {}).then(function() {
					logoutRequest();
				});
		} else {
			logoutRequest();

		}
	});
	return p;
};

/**
 * Disconnect from the cloud.
 *
 */

ConversationClient.prototype.disconnect = function() {
	return this.connection.disconnect();
};
/**
 * Connect from the cloud.
 *
 */
ConversationClient.prototype.connect = function() {
	return this.connection.connect();
};

module.exports = ConversationClient;